# Python标准库13 循环器（itertools）
"""
在循环对象和函数对象中，我们了解了循环器（iterator）的功能。
循环器是对象的容器，包含有多个对象。通过调用循环器的next()方法
（__next__()方法，在Python 3.x中），循环器将依次返回一个对象。
直到所有的对象遍历穷尽，循环器将举出StopIteration错误

在for i in iterator结构中，循环器每次返回的对象将赋予给i，直到
循环结束。使用iter()内置函数，我们可以将诸如表，字典等容器变为
循环器。比如
"""
from _pytest.compat import imap

"""
for i in iter([2, 4, 5, 6]):
    print(i)
"""
"""
标准库中的itertools包提供了更加灵活的生成循环器的工具。这些工具
的输入大都是已有的循环器。另一方面，这些工具完全可以自行使用Python
实现，该包只是提供了一种比较标准、高效的实现方式。这也符合Python
只有且最好只有解决方案的理念
"""
# import the tools
from itertools import *

# 无穷循环器
count(5, 2)  # 从5开始的整数循环器，每次增加2，即5, 7, 9, 11, 13, 15 ...
cycle('abc')  # 重复序列的元素，既a, b, c, a, b, c ...
# repeat(1.2)  # 重复1.2，构成无穷循环器，即1.2, 1.2, 1.2, ...

# repeat也可以有一个次数限制：
repeat(10, 5)  # 重复10，共重复5次

# 函数式工具
# 函数式编程是将函数本身作为处理对象的编程方式。在Python中，函数
# 也是对象，因此可以轻松的进行一些函数式的处理，比如map(),
# filter(), reduce()函数
# itertools包含类似的工具。这些函数作为参数，并将结果返回为一个循环器
rlt = imap(pow, [1, 2, 3], [1, 2, 3])
for num in rlt:
    print(num)

"""
上面显示了imap函数。该函数与map()函数功能相似，
只不过返回的不是序列，而是一个循环器。
包含元素1, 4, 27，即1**1, 2**2, 3**3的结果。
函数pow(内置的乘方函数)作为第一个参数。
pow()依次作用于后面两个列表的每个元素，并收集函数结果，
组成返回的循环器。

此外，还可以用下面的函数:
"""
starmap(pow, [(1, 1), (2, 2), (3, 3)])

"""
pow将依次作用于表的每个tuple
"""


